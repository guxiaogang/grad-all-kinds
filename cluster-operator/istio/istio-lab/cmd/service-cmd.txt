### clone repository and config automatic injection in default namespace
sudo yum install -y git
git clone https://github.com/mgxian/istio-lab && cd istio-lab
kubectl label namespace default istio-injection=enabled


### deploy services
kubectl apply -f service/go/service-go.yaml
kubectl apply -f service/node/service-node.yaml
kubectl apply -f service/lua/service-lua.yaml
kubectl apply -f service/python/service-python.yaml
kubectl apply -f service/js/service-js.yaml

kubectl get deploy
kubectl get pod
kubectl get svc


### test access services
kubectl apply -f kubernetes/dns-test.yaml
kubectl get pod

kubectl exec dns-test -c dns-test -- nslookup service-go
kubectl exec dns-test -c dns-test -- curl http://service-go/env
kubectl exec dns-test -c dns-test -- curl http://service-node/env
kubectl exec dns-test -c dns-test -- curl http://service-lua/env
kubectl exec dns-test -c dns-test -- curl http://service-python/env
kubectl exec dns-test -c dns-test -- curl -I http://service-js/


### apply route test
istioctl create -f istio/gateway-js-v1.yaml 

http://11.11.11.112:31380/

istioctl delete -f istio/route/gateway-js-v1.yaml
istioctl create -f istio/gateway-js-v2.yaml

http://11.11.11.112:31380/


### delete services
kubectl delete -f service/go/service-go.yaml
kubectl delete -f service/node/service-node.yaml
kubectl delete -f service/lua/service-lua.yaml
kubectl delete -f service/python/service-python.yaml
kubectl delete -f service/js/service-js.yaml


### config no automatic injection in default namespace
kubectl label namespace default istio-injection-


### access service nodePort
kubectl expose deployment service-js-v1 --type=NodePort --name=service-js-nodeport --port=80 --target-port=80
SERVICE_JS_PORT=$(kubectl get service service-js-nodeport -o jsonpath='{.spec.ports[0].nodePort}')
HOST=$(kubectl get node lab2 -o 'jsonpath={.status.addresses[0].address}')
GATEWAY_URL=$HOST:$SERVICE_JS_PORT
echo http://$GATEWAY_URL/
curl -I http://$GATEWAY_URL/

kubectl expose deployment service-python-v1 --type=NodePort --name=service-python-nodeport --port=80 --target-port=80
SERVICE_PYTHON_PORT=$(kubectl get service service-python-nodeport -o jsonpath='{.spec.ports[0].nodePort}')
HOST=$(kubectl get node lab2 -o 'jsonpath={.status.addresses[0].address}')
GATEWAY_URL=$HOST:$SERVICE_PYTHON_PORT
echo http://$GATEWAY_URL/env
curl http://$GATEWAY_URL/env

kubectl delete service service-js-nodeport service-python-nodeport
kubectl delete -f kubernetes/dns-test.yaml


### restart pilot
kubectl delete pod -n istio-system $(kubectl get pod -l app=pilot -n istio-system -o jsonpath='{.items[*].metadata.name}')
kubectl get pod -l app=pilot -n istio-system


### get pilot log
kubectl logs -f -n istio-system $(kubectl get pod -l app=pilot -n istio-system -o jsonpath='{.items[*].metadata.name}') discovery


### restart sidecar injector
kubectl delete pod -n istio-system $(kubectl get pod -l istio=sidecar-injector -n istio-system -o jsonpath='{.items[*].metadata.name}')
kubectl get pod -l istio=sidecar-injector -n istio-system


### restart galley
kubectl delete pod -n istio-system $(kubectl get pod -l istio=galley -n istio-system -o jsonpath='{.items[*].metadata.name}')
kubectl get pod -l istio=galley -n istio-system


### disable automatic injection in default namespace
kubectl label namespace default istio-injection-



### mTLS test
for from in "foo" "bar" "legacy"; do for to in "foo" "bar" "legacy"; do kubectl exec $(kubectl get pod -l app=sleep -n ${from} -o jsonpath={.items..metadata.name}) -c sleep -n ${from} -- curl http://httpbin.${to}:8000/ip -s -o /dev/null -w "sleep.${from} to httpbin.${to}: %{http_code}\n"; done; done

for from in "foo" "bar"; do for to in "foo" "bar"; do kubectl exec $(kubectl get pod -l app=sleep -n ${from} -o jsonpath={.items..metadata.name}) -c sleep -n ${from} -- curl http://httpbin.${to}:8000/ip -s -o /dev/null -w "sleep.${from} to httpbin.${to}: %{http_code}\n"; done; done

for from in "foo" "bar"; do for to in "foo" "bar"; do kubectl exec $(kubectl get pod -l app=sleep -n ${from} -o jsonpath={.items..metadata.name}) -c sleep -n ${from} -- curl http://httpbin.${to}:8000/ip -s -o /dev/null -w "sleep.${from} to httpbin.${to}: %{http_code}\n"; done; done

for from in "legacy"; do for to in "foo" "bar"; do kubectl exec $(kubectl get pod -l app=sleep -n ${from} -o jsonpath={.items..metadata.name}) -c sleep -n ${from} -- curl http://httpbin.${to}:8000/ip -s -o /dev/null -w "sleep.${from} to httpbin.${to}: %{http_code}\n"; done; done

for from in "foo" "bar"; do for to in "legacy"; do kubectl exec $(kubectl get pod -l app=sleep -n ${from} -o jsonpath={.items..metadata.name}) -c sleep -n ${from} -- curl http://httpbin.${to}:8000/ip -s -o /dev/null -w "sleep.${from} to httpbin.${to}: %{http_code}\n"; done; done

for from in "foo" "bar"; do for to in "legacy"; do kubectl exec $(kubectl get pod -l app=sleep -n ${from} -o jsonpath={.items..metadata.name}) -c sleep -n ${from} -- curl http://httpbin.${to}:8000/ip -s -o /dev/null -w "sleep.${from} to httpbin.${to}: %{http_code}\n"; done; done

TOKEN=$(kubectl describe secret $(kubectl get secrets | grep default | cut -f1 -d ' ') | grep -E '^token' | cut -f2 -d':' | tr -d '\t')
kubectl exec $(kubectl get pod -l app=sleep -n foo -o jsonpath={.items..metadata.name}) -c sleep -n foo -- curl https://kubernetes.default/api --header "Authorization: Bearer $TOKEN" --insecure -s -o /dev/null -w "%{http_code}\n"

for from in "foo" "bar" "legacy"; do for to in "foo" "bar" "legacy"; do kubectl exec $(kubectl get pod -l app=sleep -n ${from} -o jsonpath={.items..metadata.name}) -c sleep -n ${from} -- curl http://httpbin.${to}:8000/ip -s -o /dev/null -w "sleep.${from} to httpbin.${to}: %{http_code}\n"; done; done

kubectl exec $(kubectl get pod -l app=sleep -n legacy -o jsonpath={.items..metadata.name}) -c sleep -n legacy -- curl http://httpbin.bar:8000/ip -s -o /dev/null -w "%{http_code}\n"

### JWT test
sudo yum install -y python-pip wget
sudo pip install jwcrypto -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com
mkdir jwt-test
wget -O jwt-test/key.pem https://raw.githubusercontent.com/istio/istio/release-1.0/security/tools/jwt/samples/key.pem
wget -O jwt-test/gen-jwt.py https://raw.githubusercontent.com/istio/istio/release-1.0/security/tools/jwt/samples/gen-jwt.py

TOKEN=$(python jwt-test/gen-jwt.py jwt-test/key.pem --expire 5)
for i in `seq 1 10`; do curl --header "Authorization: Bearer $TOKEN" http://11.11.11.111:31380/headers -s -o /dev/null -w "%{http_code}\n"; sleep 1; done

TOKEN=$(curl https://raw.githubusercontent.com/istio/istio/release-1.0/security/tools/jwt/samples/demo.jwt -s)
curl --header "Authorization: Bearer $TOKEN" http://11.11.11.111:31380/headers -s -o /dev/null -w "%{http_code}\n"
kubectl exec $(kubectl get pod -l app=sleep -n foo -o jsonpath={.items..metadata.name}) -c sleep -n foo -- curl http://httpbin.foo:8000/ip -s -o /dev/null -w "%{http_code}\n"
kubectl exec $(kubectl get pod -l app=sleep -n foo -o jsonpath={.items..metadata.name}) -c sleep -n foo -- curl http://httpbin.foo:8000/ip -s -o /dev/null -w "%{http_code}\n" --header "Authorization: Bearer $TOKEN"
kubectl exec $(kubectl get pod -l app=sleep -n legacy -o jsonpath={.items..metadata.name}) -c sleep -n legacy -- curl http://httpbin.foo:8000/ip -s -o /dev/null -w "%{http_code}\n" --header "Authorization: Bearer $TOKEN"

curl --header "X-Auth: $TOKEN" http://11.11.11.111:31380/headers -s -o /dev/null -w "%{http_code}\n"